---
source: tests/poly_infer_test.rs
expression: "&result"
---
|- let s = fun f -> fun g -> fun x -> f x (g x) in let k = fun x -> fun y -> x in s k k : ('a -> 'a) by T-Let {
    |- fun f -> fun g -> fun x -> f x (g x) : (('c -> ('e -> 'f)) -> (('c -> 'e) -> ('c -> 'f))) by T-Abs {
        f: ('c -> ('e -> 'f)) |- fun g -> fun x -> f x (g x) : (('c -> 'e) -> ('c -> 'f)) by T-Abs {
            f: ('c -> ('e -> 'f)), g: ('c -> 'e) |- fun x -> f x (g x) : ('c -> 'f) by T-Abs {
                f: ('c -> ('e -> 'f)), g: ('c -> 'e), x: 'c |- f x (g x) : 'f by T-App {
                    f: ('c -> ('e -> 'f)), g: ('c -> 'e), x: 'c |- f x : ('e -> 'f) by T-App {
                        f: ('c -> ('e -> 'f)), g: ('c -> 'e), x: 'c |- f : ('c -> ('e -> 'f)) by T-Var {
                        };
                        f: ('c -> ('e -> 'f)), g: ('c -> 'e), x: 'c |- x : 'c by T-Var {
                        };
                    };
                    f: ('c -> ('e -> 'f)), g: ('c -> 'e), x: 'c |- (g x) : 'e by T-App {
                        f: ('c -> ('e -> 'f)), g: ('c -> 'e), x: 'c |- g : ('c -> 'e) by T-Var {
                        };
                        f: ('c -> ('e -> 'f)), g: ('c -> 'e), x: 'c |- x : 'c by T-Var {
                        };
                    };
                };
            };
        };
    };
    s: 'c 'e 'f. (('c -> ('e -> 'f)) -> (('c -> 'e) -> ('c -> 'f))) |- let k = fun x -> fun y -> x in s k k : ('a -> 'a) by T-Let {
        s: 'c 'e 'f. (('c -> ('e -> 'f)) -> (('c -> 'e) -> ('c -> 'f))) |- fun x -> fun y -> x : ('g -> ('h -> 'g)) by T-Abs {
            s: 'c 'e 'f. (('c -> ('e -> 'f)) -> (('c -> 'e) -> ('c -> 'f))), x: 'g |- fun y -> x : ('h -> 'g) by T-Abs {
                s: 'c 'e 'f. (('c -> ('e -> 'f)) -> (('c -> 'e) -> ('c -> 'f))), x: 'g, y: 'h |- x : 'g by T-Var {
                };
            };
        };
        s: 'c 'e 'f. (('c -> ('e -> 'f)) -> (('c -> 'e) -> ('c -> 'f))), k: 'g 'h. ('g -> ('h -> 'g)) |- s k k : ('a -> 'a) by T-App {
            s: 'c 'e 'f. (('c -> ('e -> 'f)) -> (('c -> 'e) -> ('c -> 'f))), k: 'g 'h. ('g -> ('h -> 'g)) |- s k : (('a -> ('o -> 'a)) -> ('a -> 'a)) by T-App {
                s: 'c 'e 'f. (('c -> ('e -> 'f)) -> (('c -> 'e) -> ('c -> 'f))), k: 'g 'h. ('g -> ('h -> 'g)) |- s : (('a -> (('o -> 'a) -> 'a)) -> (('a -> ('o -> 'a)) -> ('a -> 'a))) by T-Var {
                };
                s: 'c 'e 'f. (('c -> ('e -> 'f)) -> (('c -> 'e) -> ('c -> 'f))), k: 'g 'h. ('g -> ('h -> 'g)) |- k : ('a -> (('o -> 'a) -> 'a)) by T-Var {
                };
            };
            s: 'c 'e 'f. (('c -> ('e -> 'f)) -> (('c -> 'e) -> ('c -> 'f))), k: 'g 'h. ('g -> ('h -> 'g)) |- k : ('a -> ('o -> 'a)) by T-Var {
            };
        };
    };
};
