---
source: tests/poly_infer_test.rs
expression: "&result"
---
|- let rec map = fun f -> fun l -> match l with [] -> [] | x::y -> f x :: map f y in let f = map (fun x -> x) in let a = f (3 :: []) in f (true :: []) : bool list by T-LetRec {
    map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e) |- fun l -> match l with [] -> [] | x::y -> f x :: map f y : ('d list -> 'e list) by T-Abs {
        map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list |- match l with [] -> [] | x::y -> f x :: map f y : 'e list by T-Match {
            map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list |- l : 'd list by T-Var {
            };
            map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list |- [] : 'e list by T-Nil {
            };
            map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list, x: 'd, y: 'd list |- f x :: map f y : 'e list by T-Cons {
                map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list, x: 'd, y: 'd list |- f x : 'e by T-App {
                    map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list, x: 'd, y: 'd list |- f : ('d -> 'e) by T-Var {
                    };
                    map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list, x: 'd, y: 'd list |- x : 'd by T-Var {
                    };
                };
                map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list, x: 'd, y: 'd list |- map f y : 'e list by T-App {
                    map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list, x: 'd, y: 'd list |- map f : ('d list -> 'e list) by T-App {
                        map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list, x: 'd, y: 'd list |- map : (('d -> 'e) -> ('d list -> 'e list)) by T-Var {
                        };
                        map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list, x: 'd, y: 'd list |- f : ('d -> 'e) by T-Var {
                        };
                    };
                    map: (('d -> 'e) -> ('d list -> 'e list)), f: ('d -> 'e), l: 'd list, x: 'd, y: 'd list |- y : 'd list by T-Var {
                    };
                };
            };
        };
    };
    map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)) |- let f = map (fun x -> x) in let a = f (3 :: []) in f (true :: []) : bool list by T-Let {
        map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)) |- map (fun x -> x) : ('j list -> 'j list) by T-App {
            map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)) |- map : (('j -> 'j) -> ('j list -> 'j list)) by T-Var {
            };
            map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)) |- (fun x -> x) : ('j -> 'j) by T-Abs {
                map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), x: 'j |- x : 'j by T-Var {
                };
            };
        };
        map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list) |- let a = f (3 :: []) in f (true :: []) : bool list by T-Let {
            map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list) |- f (3 :: []) : int list by T-App {
                map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list) |- f : (int list -> int list) by T-Var {
                };
                map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list) |- (3 :: []) : int list by T-Cons {
                    map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list) |- 3 : int by T-Int {
                    };
                    map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list) |- [] : int list by T-Nil {
                    };
                };
            };
            map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list), a: int list |- f (true :: []) : bool list by T-App {
                map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list), a: int list |- f : (bool list -> bool list) by T-Var {
                };
                map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list), a: int list |- (true :: []) : bool list by T-Cons {
                    map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list), a: int list |- true : bool by T-Bool {
                    };
                    map: 'd 'e. (('d -> 'e) -> ('d list -> 'e list)), f: 'j. ('j list -> 'j list), a: int list |- [] : bool list by T-Nil {
                    };
                };
            };
        };
    };
};
